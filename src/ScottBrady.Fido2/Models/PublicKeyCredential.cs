using System;
using System.Text.Json.Serialization;

namespace ScottBrady.Fido2.Models;

/// <summary>
/// Returned when a new credential is created (registration) or a new assertion is requested (authentication). 
/// </summary>
public class PublicKeyCredential 
{
    /// <summary>
    /// Creates a new PublicKeyCredential with required parameters
    /// </summary>
    /// <param name="id"></param>
    /// <param name="rawId"></param>
    /// <param name="type"></param>
    /// <param name="response"></param>
    /// <exception cref="ArgumentNullException"></exception>
    public PublicKeyCredential(string id, byte[] rawId, string type, AuthenticatorResponse response)
    {
        Id = id ?? throw new ArgumentNullException(nameof(id));
        RawId = rawId ?? throw new ArgumentNullException(nameof(rawId));
        Type = type ?? throw new ArgumentNullException(nameof(type));
        Response = response ?? throw new ArgumentNullException(nameof(response));
    }
    
    /// <summary>
    /// The credentials identifier, base64url encoded.
    /// </summary>
    [JsonPropertyName("id")]
    public string Id { get; set; }
    
    /// <summary>
    /// The credential's identifier, as raw bytes.
    /// </summary>
    [JsonPropertyName("rawId")]
    public byte[] RawId { get; set; }
    
    /// <summary>
    /// The type of credential.
    /// Must be "public-key".
    /// </summary>
    [JsonPropertyName("type")]
    public string Type { get; set; }
    
    /// <summary>
    /// The authenticator's response to the client's request.
    /// During registration, must be an <see cref="AuthenticatorAttestationResponse"/>.
    /// During authentication, must be an <see cref="AuthenticatorAssertionResponse"/>.
    /// </summary>
    [JsonPropertyName("response")]
    public AuthenticatorResponse Response { get; set; }
}

/// <summary>
/// The authenticator's response to the client's request.
/// </summary>
[JsonConverter(typeof(AuthenticatorResponseJsonConverter))]
public abstract class AuthenticatorResponse
{
    /// <summary>
    /// The client data generated by the WebAuthn API.
    /// A hash of this data is sent to the authenticator.
    /// </summary>
    [JsonPropertyName("clientDataJSON")]
    public byte[] ClientDataJson { get; set; }
}

/// <summary>
/// The authenticator's response to a client's request to create a new credential (registration).
/// </summary>
public class AuthenticatorAttestationResponse : AuthenticatorResponse // TODO: does AuthenticatorAttestationResponse require a constructor? 
{
    /// <inheritdoc cref="Models.AttestationObject" />
    [JsonPropertyName("attestationObject")]
    public byte[] AttestationObject { get; set; }
}

/// <summary>
/// he authenticator's response to a client's request to create a new assertion (authentication). 
/// </summary>
public class AuthenticatorAssertionResponse : AuthenticatorResponse
{
    /// <inheritdoc cref="Models.AuthenticatorData"/>
    [JsonPropertyName("authenticatorData")]
    public byte[] AuthenticatorData { get; set; }
    
    /// <summary>
    /// The signature returned by the authenticator as raw bytes.
    /// </summary>
    [JsonPropertyName("signature")]
    public byte[] Signature { get; set; }
    
    /// <summary>
    /// The user handle (ID) returned by the authenticator as raw bytes
    /// </summary>
    [JsonPropertyName("userHandle")]
    public byte[] UserHandle { get; set; }
}