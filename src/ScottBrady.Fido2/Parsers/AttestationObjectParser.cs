using System;
using System.IO;
using PeterO.Cbor;

namespace ScottBrady.Fido2.Parsers;

public class AttestationObjectParser
{
    private readonly AuthenticatorDataParser authenticatorDataParser = new AuthenticatorDataParser();
    
    public AttestationObject Parse(ReadOnlySpan<byte> attestationObject)
    {
        // TODO: guards (inc. length checks, CBOR error)

        CBORObject cbor;
        using (var ms = new MemoryStream(attestationObject.ToArray()))
        {
            cbor = CBORObject.Read(ms);
            if (ms.Position != ms.Length) throw new Exception();
        }
        
        var attestationStatementFormat = cbor["fmt"]; // should be textstring
        var attestationStatement = cbor["attStmt"]; // should be map
        var authenticatorDataCbor = cbor["authData"]; // should be bytes
        
        var authenticatorData = authenticatorDataParser.Parse(authenticatorDataCbor.GetByteString());
        
        return new AttestationObject
        {
            StatementFormat = attestationStatementFormat.AsString(),
            Statement = attestationStatement,
            AuthenticatorData = authenticatorData
        };
    }
}

/// <summary>
/// The attestation generated by the authenticator.
/// Includes an attestation statement, which provides proof about the characteristics of the authenticator itself,
/// and authenticator data, which contains the created bindings between the authenticator and the relying party (web server).
/// </summary>
/// <remarks>
/// This library's implementation of the <a href="https://www.w3.org/TR/webauthn-2/#sctn-attestation">attestation object</a>.
/// </remarks>
public class AttestationObject
{
    /// <summary>
    /// The format of the attestation.
    /// </summary>
    public string StatementFormat { get; set; }
    
    /// <summary>
    /// The attestation statement.
    /// Provides proof about the characteristics of the authenticator, such as its construction and make/model.
    /// </summary>
    public CBORObject Statement { get; set; }
    
    /// <summary>
    /// The authenticator data.
    /// Contains the bindings between the authenticator and relying party (web server), such as the public key,
    /// signature counter, the RP ID used, and if the user proved their presence or verified themselves.
    /// </summary>
    public AuthenticatorData AuthenticatorData { get; set; }
    
}