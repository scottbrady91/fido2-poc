using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;

namespace ScottBrady.Fido2.Cryptography;

/// <summary>
/// FIDO signature validator.
/// </summary>
public interface IFidoSignatureValidator
{
    /// <summary>
    /// Validates a signature generated by a FIDO authenticator.
    /// </summary>
    /// <param name="data">The parsed data to validate the signature against. This is a concatenation of the authenticator data and a SHA-256 hash of the client data.</param>
    /// <param name="signature">The signature generated during the authentication ceremony.</param>
    /// <param name="key">The stored public key.</param>
    Task<bool> IsValidSignature(byte[] data, byte[] signature, CredentialPublicKey key);
}

/// <inheritdoc />
public class FidoSignatureValidator : IFidoSignatureValidator
{
    // TODO: how to make extensible? Move to options? Move to factory?
    private IReadOnlyDictionary<string, Func<ISignatureValidationStrategy>> validators =
        new ReadOnlyDictionary<string, Func<ISignatureValidationStrategy>>(new Dictionary<string, Func<ISignatureValidationStrategy>>
        {
            { CoseConstants.Algorithms.ES256, () => new EcdsaSignatureValidationStrategy() },
            { CoseConstants.Algorithms.ES384, () => new EcdsaSignatureValidationStrategy() },
            { CoseConstants.Algorithms.ES512, () => new EcdsaSignatureValidationStrategy() },
            { CoseConstants.Algorithms.RS256, () => new RsaSignatureValidationStrategy() },
            { CoseConstants.Algorithms.RS384, () => new RsaSignatureValidationStrategy() },
            { CoseConstants.Algorithms.RS512, () => new RsaSignatureValidationStrategy() }
            // TODO: RS1?
            // TODO: EdDSA?
        });

    /// <inheritdoc />
    public Task<bool> IsValidSignature(byte[] data, byte[] signature, CredentialPublicKey key)
    {
        // TODO: move signature concatenation here?

        if (!validators.TryGetValue(key.Algorithm, out var strategy)) throw new FidoException($"Unsupported COSE algorithm of {key.Algorithm}");
        
        var isValid = strategy().ValidateSignature(data, signature, key);
        return Task.FromResult(isValid);
    }
}